insert Xbim.Ifc4.Kernel.IfcProxy defect in model.Instances {int componentLabel = 244; Xbim.Ifc4.Kernel.IfcProduct component = (Xbim.Ifc4.Kernel.IfcProduct) model.Instances[componentLabel]; Type damageClass = typeof(Xbim.Ifc4.Kernel.IfcTypeObject); Xbim.Ifc4.Kernel.IfcTypeObject damageTypeObject = (Xbim.Ifc4.Kernel.IfcTypeObject) model.Instances.New(damageClass); damageTypeObject.Name = "Damage type:Crack"; damageTypeObject.ApplicableOccurrence = "IfcProxy,IfcVoidingFeature,IfcSurfaceFeature,IfcAnnotation"; defect.Name = "Crack"; defect.ProxyType =  Xbim.Ifc4.Interfaces.IfcObjectTypeEnum.PRODUCT; Type classTypeRelationShip = typeof(Xbim.Ifc4.Kernel.IfcRelDefinesByType); Xbim.Ifc4.Kernel.IfcRelDefinesByType typeRelation = (Xbim.Ifc4.Kernel.IfcRelDefinesByType) model.Instances.New(classTypeRelationShip); typeRelation.Name = "Crack type relation"; typeRelation.RelatedObjects.Add(defect); typeRelation.RelatingType = damageTypeObject; Type aggregatesClass = typeof(Xbim.Ifc4.Kernel.IfcRelAggregates); Xbim.Ifc4.Kernel.IfcRelAggregates aggregation = (Xbim.Ifc4.Kernel.IfcRelAggregates) model.Instances.New(aggregatesClass);aggregation.RelatedObjects.Add(defect); aggregation.RelatingObject = component; defect.ObjectPlacement = component.ObjectPlacement; Type defShapeClass = typeof(Xbim.Ifc4.RepresentationResource.IfcProductDefinitionShape); Xbim.Ifc4.RepresentationResource.IfcProductDefinitionShape defShape = (Xbim.Ifc4.RepresentationResource.IfcProductDefinitionShape) model.Instances.New(defShapeClass); defect.Representation = defShape; Type shapeRepClass = typeof(Xbim.Ifc4.RepresentationResource.IfcShapeRepresentation); Xbim.Ifc4.RepresentationResource.IfcShapeRepresentation shapeRep = (Xbim.Ifc4.RepresentationResource.IfcShapeRepresentation) model.Instances.New(shapeRepClass); defShape.Representations.Add(shapeRep); shapeRep.RepresentationIdentifier = "Body"; shapeRep.RepresentationType = "Tessellation"; Type contextClass = typeof(Xbim.Ifc4.RepresentationResource.IfcGeometricRepresentationContext); Xbim.Ifc4.RepresentationResource.IfcGeometricRepresentationContext context = (Xbim.Ifc4.RepresentationResource.IfcGeometricRepresentationContext) model.Instances.New(contextClass); context.ContextIdentifier = "Defect geometries"; context.ContextType = "Model"; shapeRep.ContextOfItems = context; Type faceSetClass = typeof(Xbim.Ifc4.GeometricModelResource.IfcTriangulatedFaceSet); Xbim.Ifc4.GeometricModelResource.IfcTriangulatedFaceSet faceSet = (Xbim.Ifc4.GeometricModelResource.IfcTriangulatedFaceSet) model.Instances.New(faceSetClass); shapeRep.Items.Add(faceSet); faceSet.Closed = true; Type verticesClass = typeof(Xbim.Ifc4.GeometricModelResource.IfcCartesianPointList3D); Xbim.Ifc4.GeometricModelResource.IfcCartesianPointList3D vertices = (Xbim.Ifc4.GeometricModelResource.IfcCartesianPointList3D) model.Instances.New(verticesClass); faceSet.Coordinates = vertices; IItemSet<Xbim.Ifc4.MeasureResource.IfcLengthMeasure> coordinate = vertices.CoordList.GetAt(0); coordinate.AddRange(new double [] { 0.0, 0.0, 0.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(1); coordinate.AddRange(new double [] { 100.0, 0.0, 0.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(2); coordinate.AddRange(new double [] { 0.0, 100.0, 0.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(3); coordinate.AddRange(new double [] { 100.0, 100.0, 0.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(4); coordinate.AddRange(new double [] { 0.0, 0.0, 100.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(5); coordinate.AddRange(new double [] { 100.0, 0.0, 100.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(6); coordinate.AddRange(new double [] { 0.0, 100.0, 100.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); coordinate = vertices.CoordList.GetAt(7); coordinate.AddRange(new double [] { 100.0, 100.0, 100.0 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcLengthMeasure(i))); IItemSet<Xbim.Ifc4.MeasureResource.IfcPositiveInteger> index = faceSet.CoordIndex.GetAt(0); index.AddRange(new int[] { 1, 2, 3 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(1); index.AddRange(new int[] { 2, 4, 3 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(2); index.AddRange(new int[] { 5, 6, 7 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(3); index.AddRange(new int[] { 6, 8, 7 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(4); index.AddRange(new int[] { 1, 2, 6 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(5); index.AddRange(new int[] { 2, 6, 5 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(6); index.AddRange(new int[] { 3, 8, 4 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(7); index.AddRange(new int[] { 4, 7, 8 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(8); index.AddRange(new int[] { 1, 5, 3 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(9); index.AddRange(new int[] { 7, 3, 5 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(10); index.AddRange(new int[] { 2, 6, 4 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i))); index = faceSet.CoordIndex.GetAt(11); index.AddRange(new int[] { 8, 4, 6 }.Select(i => new Xbim.Ifc4.MeasureResource.IfcPositiveInteger(i)));}