<#@ output extension=".cs" #>
<#@ template language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
#>//This file is automatically generated from the CLIF code generator

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

using Xbim.Ifc;
using Xbim.Common;

using CLIF.Common;

namespace <#=this.ClassNamespace#>
{
	public class <#=this.ClassName#> : <#=LinqSelectQueryTemplate.interfaceType.Name#>
	{
		<#
			IEnumerable<string> parameterStrings = from paramInfo in LinqSelectQueryTemplate.interfaceMethod.GetParameters()
                                                   select (paramInfo.ParameterType.Name + " " + paramInfo.Name);
            string finalParamString = string.Join(", ", parameterStrings);
			Type returnType = LinqSelectQueryTemplate.interfaceMethod.ReturnType;
			string returnTypeString;
			if (returnType.IsGenericType)
            {
				Type[] genericArguments = returnType.GetGenericArguments();
				returnTypeString = LinqSelectQueryTemplate.interfaceMethod.ReturnType.Name.Split('`')[0] + 
					"<" + string.Join(",", genericArguments.Select(x => x.Name)) + ">";
            }
			else
            {
				returnTypeString = LinqSelectQueryTemplate.interfaceMethod.ReturnType.Name;
            }
		#>
		public <#=returnTypeString#> <#=LinqSelectQueryTemplate.interfaceMethod.Name#>(<#=finalParamString#>)
		{
			return <#=this.LinqQuery#>;
		}
	}
}
