<#@ output extension=".cs" #>
<#@ template language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
#>//This file is automatically generated from the CLIF code generator

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

using Xbim.Ifc;
using Xbim.Common;

using CLIF.Common;

namespace <#=this.ClassNamespace#>
{
	public class <#=this.ClassName#> : <#=LinqModificationTemplate.interfaceType.FullName#>
	{
		<# 
			string finalParamString = "";
			string storeName = "ifcStore";
			string entitiesName = "entitiesToUpdate";
			foreach (System.Reflection.ParameterInfo paramInfo in LinqModificationTemplate.interfaceMethod.GetParameters())
            {
				string paramString;
				if (paramInfo.ParameterType.IsGenericType)
                {
                    paramString = paramInfo.ParameterType.FullName.Split("`")[0] + "<";
					paramString = paramString + string.Join(",", paramInfo.ParameterType.GenericTypeArguments.Select(x => x.FullName));
					paramString = paramString + "> " + paramInfo.Name;
					entitiesName = paramInfo.Name;
                }
                else
                {
					paramString = string.Join(" ", paramInfo.ParameterType.FullName, paramInfo.Name);
					if (paramInfo.ParameterType.Equals(typeof(Xbim.Ifc.IfcStore)))
                    {
						storeName = paramInfo.Name;
                    }
                }

				if (string.IsNullOrWhiteSpace(finalParamString))
                {
					finalParamString = paramString;
                }
                else
                {
					finalParamString = finalParamString + ", " + paramString;
                }
            }
			
			Type returnType = LinqModificationTemplate.interfaceMethod.ReturnType;
			string returnTypeString;
			if (returnType.IsGenericType)
            {
				Type[] genericArguments = returnType.GetGenericArguments();
				returnTypeString = LinqModificationTemplate.interfaceMethod.ReturnType.Name.Split('`')[0] + 
					"<" + string.Join(",", genericArguments.Select(x => x.Name)) + ">";
            }
			else
            {
                if (LinqModificationTemplate.interfaceMethod.ReturnType.Equals(typeof(void)))
                {
					returnTypeString = LinqModificationTemplate.interfaceMethod.ReturnType.Name.ToLower();
                }
				else
                {
					returnTypeString = LinqModificationTemplate.interfaceMethod.ReturnType.Name;
				}
            }
		#>

		<#string nameInternalMethod = "InternalUpdateMethod";#>

		private Xbim.Common.IModel model;

		public <#=returnTypeString#> <#=LinqModificationTemplate.interfaceMethod.Name#>(<#=finalParamString#>)
		{
			this.model = <#=storeName#>.Model;
			<#=storeName#>.ForEach<<#=this.InputParameterTypeFullName#>>(<#=entitiesName#>.Cast<<#=this.InputParameterTypeFullName#>>(), <#=nameInternalMethod#>);
		}

		private void <#=nameInternalMethod#> (<#=this.InputParameterTypeFullName#> <#=this.UpdateEntityName#>)
		{
			<#=this.MethodBody#>
		}
	}
}